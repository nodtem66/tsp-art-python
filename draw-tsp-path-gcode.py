import datetime
from os.path import basename

# ***** Design parameters  ************************
CTS = 600 # [mm/min]
num_layers = 1 # [-]
# TSP_FILE = "./Arts/Girl-4096-stipple.tsp"
# CYC_FILE = "./Arts/Girl-4096-stipple.cyc"
# GCODE_FILE = f"girl-4096-nl{num_layers}.gcode"
TSP_FILE = "./Arts/Lisa-4096-stipple.tsp"
CYC_FILE = "./Arts/Lisa-4096-stipple.cyc"
GCODE_FILE = f"Lisa-4096-nl{num_layers}.gcode"
width = 40 # [mm]
height = 40 # [mm]
#starting_index = 638 # [-] Starting index of the path 638 for Girl 603(middle), 603 for Lisa (bottom-left) 3497 for Lisa (middle)
starting_index = 41 # [-] Starting index of the path
enable_stabilization_line = False # If True, print stabilization lines at the beginning
# *************************************************

# Function to calculate a new speed for each layer
# CTS = critical speed [mm/min]
# layer = current layer [-] (started from zero)
def new_speed(CTS, layer):
  assert layer >= 0, 'layer must be >= 0'
  if layer <= 15:
    decreased_speed = 0.015 * layer * CTS
  else:
    decreased_speed = 0.02 * layer * CTS
  return CTS - decreased_speed
# *************************************************

node_positions: list[tuple] = [] # List of node positions [(x1,y1), (x2,y2), ...]
node_path: list[int] = [] # List of node path [0, 1, 2, ...]

with open(TSP_FILE, 'r') as f:
  # Skip the first 6 lines
  for _ in range(6):
    next(f)
  # Parse the rest of the lines
  for line in f:
    i,x,y = line.split()
    node_positions.append((float(x),float(y)))

# Rescale the coordinates
max_x = max([x for x,y in node_positions])
max_y = max([y for x,y in node_positions])
node_positions = [(x/max_x*width, y/max_y*height) for x,y in node_positions]

# Read the cycle file
first_node = -1
with open(CYC_FILE, 'r') as f:
  for line in f:
    index = int(line)
    if first_node < 0:
      first_node = index
    assert index >= 0, 'index must be >= 0'
    assert index < len(node_positions), 'index must be < len(node_positions)'
    node_path.append(node_positions[index])
print("Total number of nodes:", len(node_path))
# Rotate the path to start from the starting index
node_path = node_path[starting_index:] + node_path[:starting_index] + [node_path[starting_index]]

with open(GCODE_FILE, 'w') as f:
  f.write(f"; Generated by {basename(__file__)}\n")
  f.write(f"; Date: {datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')}\n")
  #f.write(f"; TSP file: {TSP_FILE}\n")
  #f.write(f"; CYC file: {CYC_FILE}\n")
  f.write(f"; Critical speed: {CTS} mm/min\n")
  f.write(f"; Number of layers: {num_layers}\n")
  f.write(f"; Width: {width} mm\n")
  f.write(f"; Height: {height} mm\n")
  f.write('; start gcode\n')
  f.write('; Relative positioning\n')
  f.write('G91\n\nG0 X0 Y0\n')

  # Print stabilizing lines
  if enable_stabilization_line:
    for _ in range(5):
      f.write(f"G0 X10 F{CTS}\n")
      f.write(f"G0 Y0.5 F{CTS}\n")
      f.write(f"G0 X-10 F{CTS}\n")
      f.write(f"G0 Y0.5 F{CTS}\n")
  
  f.write(f"G0 Y1 F{CTS}\n")

  for layer in range(num_layers):
    prev_pos = node_path[0]
    speed = new_speed(CTS, layer)
    for pos in node_path[1:]:
      relative_pos = (pos[0] - prev_pos[0], pos[1] - prev_pos[1])
      f.write(f"G1 X{relative_pos[0]:.6f} Y{relative_pos[1]:.6f} F{speed}\n")
      prev_pos = pos

  f.write(f"G0 Y-2 F{CTS}\n")
  f.write('; turn off pressure\nM42 P0 S0\n')
  f.write('; end gcode\n')  

